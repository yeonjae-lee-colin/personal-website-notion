import { createRef } from 'react';
import { render } from '@testing-library/react';
import mergeRefs from './index';
describe('mergeRefs()', function () {
    it('returns falsy result given no arguments', function () {
        var result = mergeRefs();
        expect(result).toBe(undefined);
    });
    it('returns falsy result given falsy arguments', function () {
        var result = mergeRefs(null, null);
        expect(result).toBe(undefined);
    });
    it('returns original ref given only one ref', function () {
        var ref = jest.fn();
        var result = mergeRefs(ref);
        expect(result).toBe(ref);
    });
    it('returns original ref given one ref and one falsy argument', function () {
        var ref = jest.fn();
        var result = mergeRefs(ref, null);
        expect(result).toBe(ref);
    });
    it('returns merged refs properly', function () {
        var ref1 = jest.fn();
        var ref2 = createRef();
        var result = mergeRefs(ref1, ref2);
        expect(result).not.toBe(ref1);
        expect(result).toEqual(expect.any(Function));
    });
    it('handles merged functional refs properly', function () {
        var ref1 = jest.fn();
        var ref2 = createRef();
        var mergedRef = mergeRefs(ref1, ref2);
        var container = render(<div ref={mergedRef}/>).container;
        expect(ref1).toHaveBeenCalledTimes(1);
        expect(ref1).toHaveBeenCalledWith(container.firstChild);
    });
    it('handles merged object refs properly', function () {
        var ref1 = createRef();
        var ref2 = jest.fn();
        var mergedRef = mergeRefs(ref1, ref2);
        var container = render(<div ref={mergedRef}/>).container;
        expect(ref1.current).toBe(container.firstChild);
    });
});
